#!/bin/bash
set -e

FIDO_DIR=/etc/fido2
PAM_SUDO=/etc/pam.d/sudo
PAM_LINE='auth sufficient pam_u2f.so cue authfile=/etc/fido2/fido2'

if [[ "--remove" == "$1" ]]; then
  echo -e "\e[32mLet's remove your Fido2 device from sudo authentication.\n\e[0m"
  sudo dnf -y remove libfido2 pam_u2f || true
  sudo rm -rf "$FIDO_DIR"
  sudo sed -i "\|^${PAM_LINE//\//\\/}$|d" "$PAM_SUDO" || true
  echo -e "\e[32m\nYou've successfully removed the fido2 device setup.\e[0m"
  exit 0
fi

echo -e "\e[32mLet's setup your Fido2 device for sudo authentication.\n\e[0m"
sudo dnf -y install libfido2 fido2-tools pam_u2f

tokens=$(fido2-token -L || true)
if [ -z "$tokens" ]; then
  echo -e "\e[31m\nNo fido2 device detected. Plug it in, and unlock it if needed.\e[0m"
  exit 1
fi

sudo mkdir -p "$FIDO_DIR"
# Register key for current user
if command -v pamu2fcfg >/dev/null 2>&1; then
  echo -e "\e[32mTouch your security key when it blinksâ€¦\e[0m"
  # Create/overwrite a single-user mapping file
  sudo bash -c "pamu2fcfg -u $USER > $FIDO_DIR/fido2"
else
  echo -e "\e[31mMissing pamu2fcfg (pam_u2f). Check pam_u2f install.\e[0m"
  exit 1
fi

# Add pam line to sudo (if not already)
if ! grep -Fq "$PAM_LINE" "$PAM_SUDO"; then
  echo "$PAM_LINE" | sudo tee -a "$PAM_SUDO" >/dev/null
fi

echo -e "\e[32m\nDone. Try: \e[0m\esudo -v\e[0m"
